
Que es mongoDb:

Mongodb es una base de datos NoSQL multiplataforma, orientado a documentos y de código abierto. utiliza muchos conceptos del lenguaje de programación Javascript, como los objetos JSON, las funciones, operadores, entre otros más.
- NoSQL significa Not Only SQL (no solo sql), MongoDB es una base de datos centrada para manejar enormes cantidades de datos que se generan muy rapido.

Es flexible, escalable (podemos añadir mas recursos a nuestra base de datos añadiendo mas servidores) Y de proposito general (usada en cualquier tipo de aplicacion).
- Orientado a documentos | DATO = DOCUMENTO (vamos a guardar datos JSON y a estos objetos se les denomina documentos)
- Base de datos sin esquema (es decir no necesita reglas que rige la base de datos) 
- Escalado horizontal: Cuando la base de datos este creciendo no hace falta comprar un server mas pontente, solo comprar otro server y dividir en cluster
- JSON como formato de dato: guardaremos los datos en este formato.

- MongoDB Atlas es la solucion de mongoDb como empresa para proveernos de una nube un server para conectarnos y tener nuestro cluster alli.
- MongoDB Server es DBMS la base de datos como tal que se instala en el servidor y tenemos la base de datos.
- MongoDB Compass es una interfaz grafica para usar la base de datos.




-------------------- MongoDB instalacion (MongoDB Server) ----------------

https://www.mongodb.com/download-center/community y descargamos la MongoDB Community Server (Seleccionamos la version y el OS)
Pesa 259 mb version 4.2.3

Lo instalamos completo y no lo instalamos como un servicio (para que no inicie cuando encendemos el pc | Install MongoD as a Service)
Y instalamos MongoDB Compass y MongoDB Server

- mongod (permite iniciar el servidor)
- mongo (permite iteractuar con la base de datos desde una shell y podemos guardar datos, actualizarlos, eliminarlos, ect) 

Comprobar instalacion:
1- Abrir la consola o terminal
2- Ejecutar | mongod --version | Da error tenemos que agregarlo al PATH PATH es una variable de entorno de los sistemas operativos POSIX y los sistemas de Microsoft, en ella se especifican las rutas en las cuales la consola debe buscar los programas a ejecutar desde cualquier parte.
3- Saber la ruta donde esta instalado mongo y en la carpeta bin tenemos los programas de mongoDB | ruta C:\Program Files\MongoDB\Server\4.2\bin
4- Ya estando en la carpeta bin de mongo desde la consola .\mongod.exe --version

MongoDB esta funcionando pero desde la carpeta Lo agregamos al PATH:
1- Copiamos la ruta de bin de la carpeta mongo | C:\Program Files\MongoDB\Server\4.2\bin
2- Abrimos este Equipo => Propiedades => Configuracion avanzada del sistema => variables de entorno => doble click a path => nuevo y pegamos la direccion + enter => le damos a todo aceptar.

Y listo ya nos funciona mongod desde cualquier ruta en la consola. (mongod --version y mongo --version)

Configuracion para el comando mongod para que se quede ejecutando y no se cierre en la consola:
1- Para ejecutar la base de datos tipeamos mongod pero se cierra
2- Ir a ruta C o a la raiz y crear una carpeta llamada data y dentro de data una llamada DB
Y listo ya se queda ejecutando el comando mongod en la consola y no se cierra (esta escuchando en el puerto 27017) y si desde otra consola ejecutamos mongo nos abre un shell para hacer peticiones a la base de datos

PASOS (resumen):
- Descargar y instalar mongoDB desde la web oficial (no lo instalamos como un servicio)
- Comprobar instalacion, pero para eso necesitamos:
    - Agregar la ruta de mongo al PATH (para usar mongo desde cualquier directorio) C:\Program Files\MongoDB\Server\4.2\bin
    - Ir a ruta C o a la raiz y crear una carpeta llamada data y dentro de data una llamada DB
Y LISTO :)



-------------------- Conceptos Básicos de MongoDB ----------------------

- Base de datos: Es donde Almacenamos todos los datos de la app en formato JSON.
- Collections (Colecciones): Podemos tener colecciones de datos, Es cuando queremos agrupar datos. Ejemplo la colección de usuarios, productos, categorias, vendedores, ect es como las tablas solo que las Colecciones tienen una colección de documentos.
- Documentos: Son los datos en formato JSON

ESTRUCTURA BASICA DE MONGODB:
DB => tiene Collections => y las Collections coleccionan documentos (JSON)




-------------------------- Mongo SHELL (mongo)------------------------------

- mongod (permite iniciar el servidor)
- mongo (permite iteractuar con la base de datos desde una shell y podemos guardar datos, actualizarlos, eliminarlos, ect) es un interprete de javascript (es decir podemos ejecutar codigo js en esa SHELL)

Iniciamos la base de datos en la CMD comando: mongod
Abrimos otra consola y tipeamos mongo (mongo es la SHELL)

Palabras reservadas de mongo:
- db : retorna la base de datos actual que estamos utilizando.
- show dbs: retorna todas las bases de datos. (hasta ahora tenemos admin, config, local)
- help: retona los comandos principales
- db.help(): muestra todos los metodos para realizar a las bases de datos.

- use NOMBRE_BASE_DE_DATOS | Para crear una base de datos, pero no la crea hasta como minimo insertar un dato dentro de una colección o crear una colección.
- db.productos.insert({ "name": "laptop" }) | Para insertar un dato en la colección productos dentro de la base de datos.
- show collections | retorna las colecciones de una base de datos.

- db.dropDatabase() | elimina la base de datos actual donde estemos 

Colecciones:
- show collections | retorna las colecciones de una base de datos.
- db.createCollection("NOMBRE_COLECCION") | crea una colección dentro de la base de datos.
- db.colección.drop() db.productos.drop() | Elimina una colección (en este caso la de productos)

Documentos (Son los datos en formato JSON):
- Aceptan datos de tipo string, number, bolean, fechas (con objeto new Date() gracias al interprete), expresiones regulares, arreglos, objetos 
- Conclusion los documentos soportan todo los tipos de datos de un JSON.

- db.productos.insert({ AQUI VA EL DOCUMENTO JSON }) | Esto inserta un documento-JSON dentro de una colección (si no existe la colección la crea)
- db.productos.find() | De la colección productos quiero buscar todos los documentos (busca todos los datos de la colección productos y los muestra en una linea)
- db.productos.find().pretty() | Busca todos los documentos de una colección de manera ordenada (no todo en una sola linea).

CUANDO INSERTAMOS DOCUMENTOS-JSON LE CREA UN ATRIBUTO LLAMADO _ID UNICO AL DOCUMENTO

MongoDB pasa los datos de formato JSON a formato BSON para que mongoDB pueda tener un mejor rendimiento para manejar grandes cantidades de datos, pero eso sucede internamente nosotros vamos a manipular los datos mediante el formato JSON
{
    "nombre": "laptop",
    "precio": 40.2,
    "active": false,
    "created_at": new Date("12/12/1999"),
    "somedata": [1, "a", []],
    "atributoOBJ": {
        "nombre": "willy",
        "version": "xps",
        "ubicacion": {
            "ciudad": "USA",
            "direccion": "Algun lugar de USA"
        }
    }
}


---------------------- OPERACIONES CRUD ------------------------

----INSERTAR DATOS (DOCUMENTOS)----
Para crear un documento usamos el metodo insert:
- Podemos insertar datos sin una misma estructura para cada documento (unos pueden tener otros atributos diferentes a otros)
- db.productos.insert({ AQUI VA EL DOCUMENTO JSON }) | Esto inserta un documento-JSON dentro de una colección (si no existe la colección la crea)
- Esto inserta varios documentos a la vez se le pasa un array con los documentos-JSON al metodo insert:
db.productos.insert([ 
    {
        "name": "mouse",
        "description": "razer mouse",
        "tags": ["computers", "gaming"],
        "cantidad": 14,
        "created_at": new Date()
    },
    {
        "name": "monitor",
        "description": "lg monitor",
        "tags": ["computers", "gaming"],
        "cantidad": 3,
        "created_at": new Date()
    } 
])


----LEER O LISTAR DATOS (DOCUMENTOS)----
Para leer o listar los datos (consulta) metodo find:
- db.productos.find() | De la colección productos quiero buscar todos los documentos (busca todos los datos de la colección productos y los muestra en una linea)
- db.COLECCION.find().pretty() | Busca todos los documentos de una colección de manera ordenada (no todo en una sola linea).

CONSULTA PERSONALIZADA (UN DOCUMENTO EN ESPECIFICO):
- db.productos.find({ name: "mouse" }) | Esto me retorna un documento de la colección donde el atributo name tenga como valor "mouse" (el metodo recibe un objeto JS)
- Podemos concatenar con el metodo .pretty() para obtener el documento-JSON ordenado

- db.productos.find({ "tags": "computers" }).pretty() | Buscar los documentos-JSON con atributo tags que como valor en el array tenga un el string "computers" Retorna los objetos que cumplan la condicion.
- db.productos.find({ "tags": "computers", "name": "monitor" }).pretty() | Me retorna el documento que cumpla con las dos condiciones. 

METODO QUE ME RETORNA UN SOLO DOCUMENTO:
- db.productos.findOne({ "tags": "computers" }) | Me retorna solo el primer documento de todos los documentos.

LEER SOLO ATRIBUTOS ESPECIFICOS DE UN DOCUMENTO:
- db.COLECCION.find({ CONDICION }, { ATRIBUTOS QUE QUIERO RETORNAR })
- db.productos.find({ "tags": "computers" }, {"name": 1,"description": 1}) | Me retorna los atributos name y description de todos los productos que cumplan la condicion.

ORDENAR LOS RESULTADOS DE UNA CONSULTA POR ORDEN ALFABETICO:
- db.productos.find({ "tags": "computers" }).sort({name:1})

ESTABLECER UN LIMITE:
- db.productos.find().limit(2) | Solo me retorna los primeros 2 documentos de la colección.

CONTAR CUANTOS DOCUMENTOS TENEMOS EN UNA COLECCION:
- db.productos.count() | Me retorna el numero de documentos que hay en una COLECCION

ITERAMOS UN RESULTADO CON FOREACH Y PRINT:
- db.productos.find().forEach( (producto) => print("Nombre del producto: " + producto.name) ) | De todos los documentos de la COLECCION, iteramos cada uno y imprimo en pantalla el atributo name de cada documento en especifico. (Si el atributo que intentamos iterar no existe retorna undefined) 


----ACTUALIZAR DATOS (DOCUMENTOS)----

Para actualizar un dato usamos db.COLECCION.update({VALOR A MODIFICAR}, {NUEVOS VALORES A ACTUALIZAR})
1er parametro lo que queremos Actualizar 2do parametro nuevos valores a actualizar. REEMPLAZA TODO EL DOCUMENTO

- db.productos.update({ name: "teclado" }, { price: 99.99 }) | Esto actualiza todo el documento con los valores que le damos (price en este caso).
- db.productos.update({ price: 10 }, { name: "teclado", price: 99.99 }) | Esto actualiza el documento que tenga el precio 10 por los atributos que le pasamos en el segundo documento.


$SET - PARA MODIFICAR SOLO UN ATRIBUTO DENTRO DE UN DOCUMENTO
- db.productos.update({ "name": "pc"}, { "$set": { "description": "Lg gran pc" } }) | Al documento con name de pc quiero modificar o establecer un nuevo atributo destription con valor de lg gran pc
Ahora el documento tiene el atributo description modificado y si no existia lo crea.

SI NO EXISTE ESTE DATO A ACTUALIZAR LO INSERTA {upsert:true}
- db.productos.update({ name: "desktop" }, {$set: { "description": "gaming desktop" } }, {upsert:true} ) 
- Si no hay un documento con el atributo name: desktop para actualizar. inserta en la colección este documento

$INC - INCREMENTAR UN VALOR NUMERICO
- db.productos.update({ name: "teclado" }, { $inc: {price: 90} }) 
El documento con atributo name: "teclado" le vamos a incrementar el atributo precio en 90. (el valor que tenia sumale 90)

$RENAME - RENOMBRAR PROPIEDADES O CLAVES DE UN DOCUMENTO
- db.productos.update({ name: "pc" }, { $rename: {name: "nombre"} } ) 
Esto renombra el atributo name de la clave.



----ELIMINAR DATOS (DOCUMENTOS)----

- db.productos.remove({ name: "teclado" }) 
Elimina el documento que tenga como atributo name:"teclado" elimina el documento
Tambien elimina todos los documentos que cumplan la condicion

- db.productos.remove({}) | Elimina todos los documentos de una base de datos

